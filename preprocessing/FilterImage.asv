function [magn_image, phase_image] = FilterImage(image, new_freq, O1, rw, cw, full_blocks)
%UNTITLED7 Summary of this function goes here
%% INPUT:
%   image := segmented image
%   new_freq := the interpolated and filtere
%% OUTPUT:
%   magn_image := magnitude response of the gabor filtering
%   phase_image := phase response of the gabor filtering
%% Enhancing image with Gabor filter
% Allocating space for responses
C_E = mat2cell(image, rw, cw); % divide the image into blocks
magn = mat2cell(image, rw, cw); % output blocks
phases = mat2cell(image, rw, cw); % output blocks

% number of full blocks
num_full_blocks = size(full_blocks,1);

for idx=1:num_full_blocks
    i = full_blocks(idx,1); % might be a better way to do this
    j = full_blocks(idx,2);
    
    % Compute the orientation of filter(i, j)
    % Change from radians to angles
    if rad2deg(O1(i,j)) < 0
        filter_orient = rad2deg(O1(i,j)) + 180;
    else
        filter_orient = rad2deg(O1(i,j));
    end
    
    % Compute the wavelength of the filter from frequency image 
    filter_lambda = 1/new_freq(i,j);
    
    % Might be unnecessary, but it has given errors before, might be fixed
    % now
    if filter_lambda <2
        filter_lambda = 2;
    end
    
    block_to_filter = C_E{i, j};
    
    % Filter
    % SpatialAspectRatio chosen to 4 from litterature
    % SpatialFrequency bandwidth chosen to 1.34 from testing
    [mag, phase] =  imgaborfilt(block_to_filter, filter_lambda, filter_orient, ...
                    'SpatialAspectRatio', 4, 'SpatialFrequencyBandwidth', 1.34);
    magn{i,j}=mag;
    phases{i,j}=phase;
end

magn_image = cell2mat(magn);
phase_image = cell2mat(phases);
%% Plot the phase and megnitude response

figure(12)
imshow(phase_image)

figure(13)

% uint8 since the values should be in 0-255
imshow(uint8(magn_image))


end

